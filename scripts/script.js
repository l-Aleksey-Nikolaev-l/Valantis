const URL = "https://api.valantis.store:41000/";let finalData = [];let tableOffset = 0;let itemsOffset = 0;let errorCount = 5; // Allowed server errors times = 5 (can be from 0 to infinity).let errorCache = 0;let filterMode = false;const timeOut = 1000;async function checkSession(state) {    if(!state && !sessionStorage.getItem("X-Auth")) {        console.log("Welcome! Please, enter the API password!");        return;    }    waitingLogin(true);    let generateNewOptions = new generateOptions;    let checkResponse = await fetch(URL, generateNewOptions.getNewData(true))    if (checkResponse.status >= 200 && checkResponse.status <= 202) {        console.log("Done! You logged!");        showComponents(true);        await getData();    } else if(checkResponse.status >= 400 && checkResponse.status <= 499) {        sessionStorage.removeItem("X-Auth");        checkResponse.text().then(checkText => {            console.error(`\nError code: ${checkResponse.status}\nError message: ${checkText}`);            alert("Access denied!\nYou have to try again.");        });    } else {        setTimeout(() => {            checkResponse.text().then(checkText => {                errorsHandler(checkSession(state), checkResponse.status, checkText);            });            }, timeOut);    }    waitingLogin(false);}function waitingLogin(state) {    if(state) {        document.querySelector("#loginPanel").classList.add("loginPanelWait");    } else {        if (document.querySelector("#loginPanel")) {            document.querySelector("#loginPanel").classList.remove("loginPanelWait");        }    }}function waitingLoad(state) {    if(state) {        document.querySelector("#paginatorLoading").classList.add("paginatorLoading");    } else {        document.querySelector("#paginatorLoading").classList.remove("paginatorLoading");    }}function showComponents(state) {    if(!state) {        document.getElementById("dataPanel").style.display = "none";        document.getElementById("logOutButton").style.display = "none";            document.body.innerHTML += `        <section id="loginComponent" class="loginPanel">            <section id="loginPanel">                <label id="passwordLabel" for="apiPass">API Password</label>                <input id="apiPass" type="text">                <button id="logInButton" type="submit" onclick="checkSession(true)">LogIn</button>            </section>        </section> `;    }    else {        document.getElementById("loginComponent").remove()        document.getElementById("logOutButton").style.display = "initial";        document.getElementById("dataPanel").style.display = "initial";    }}function coarseFilter() {    let product = document.querySelector("#filterName").value;    let price = document.querySelector("#filterPrice").value;    let brand = document.querySelector("#filterBrand").value;    let tableHead = document.querySelector("#headSection");    let tableData = document.querySelector("#dataSection");    document.querySelector("#foundItems").innerText = "of Loading...";    filterMode = true;    checkMax(false);    tableHead.innerHTML = `            <tr>                <th class="columnNumber" scope="col"></th>            </tr>`;    tableData.innerHTML = "";    tableData.innerHTML += `            <tr>                <td>Waiting for new filtered data...</td>            </tr>`;    getData(false, null, product, price ,brand).then();}function fineFilter() {    let filterPrice = Number(document.querySelector("#filterPrice").value);    let filterBrand = document.querySelector("#filterBrand").value;    let tempData;    if (filterPrice && filterBrand) {        tempData = finalData.filter(item => item["price"] === filterPrice && item["brand"] === filterBrand);        finalData = tempData;    } else if(filterPrice) {        tempData = finalData.filter(item => item["price"] === filterPrice);        finalData = tempData;    } else if(filterBrand) {        tempData = finalData.filter(item => item["brand"] === filterBrand);        finalData = tempData;    }    addData();}async function getData(final, ids, product, price, brand, offset, limit) {    let noIDs = false;    let generateNewOptions = new generateOptions;    let optionsIDs = generateNewOptions.getNewData(false, ids, product, price, brand, offset, limit);    let idsResponse = await fetch(URL, optionsIDs);    if (idsResponse.ok) {        let crunchedIDs = await idsResponse.clone().json();        if(crunchedIDs.result.length === 0) {            noIDs = true;        } else {            if(!final) {                await getData(true ,crunchedIDs.result, null, null, null);            } else {                finalizeData(crunchedIDs.result);            }        }    } else {        noIDs = true;    }    if(noIDs) {        setTimeout(() => {            idsResponse.text().then(responseText => {                errorsHandler(getData(final, ids, product, price, brand, offset, limit), idsResponse.status, responseText);            });        }, timeOut);    }}function errorsHandler(handler, codeStatus, textStatus) {    if(errorCache < errorCount) {        errorCache++;        console.error(`\nError code: ${codeStatus}\nError message: ${textStatus}`);        console.warn("Retrying request, please wait...")        handler.then();    } else {        console.error(`Server has problem!\nError: ${codeStatus}\nPlease, try again later!`);        errorCache = 0;        alert("Server has problem!\nThis page will be reloaded!");        location.reload();    }}function finalizeData(rawData) {    let tempIDs = rawData.map(({ id }) => id);    let tempData = rawData.filter(({ id }, index) => !tempIDs.includes(id, index + 1));    tempData.map((item) => {        if(item["id"] === null) {            Object.assign(item, {id: ""})        }        if(item["product"] === null) {            Object.assign(item, {product: ""})        }        if(item["price"] === null) {            Object.assign(item, {price: ""})        }        if(item["brand"] === null) {            Object.assign(item, {brand: ""})        }    });    finalData.push(...tempData);    fineFilter()}class generateOptions {    constructor() {}    #md5hash = sessionStorage.getItem("X-Auth");    #request = "";    getNewData(state = false, ids = null, product = null, price = null, brand = null, offset = 0, limit = 100) {        if(state) { return this.#checkState() }        else if(!ids && !product && !price && !brand) { return this.#getIDs(offset, limit) }        else if(ids) { return this.#getItems(ids) }        else if(product) { return this.#getProducts(product) }        else if(price) { return this.#getPrice(price) }        else if(brand) { return this.#getBrand(brand) }    }    #checkState() {        this.#request = JSON.stringify({            "action": "get_ids",            "params": {"offset": 0, "limit": 0}        });        return this.#result();    }    #getIDs(offset = 0, limit) {        filterMode = false;        this.#request = JSON.stringify({            "action": "get_ids",            "params": {"offset": offset, "limit": limit}        });        return this.#result();    }    #getItems(ids) {        this.#request = JSON.stringify({            "action": "get_items",            "params": {"ids": ids}        });        return this.#result();    }    #getProducts(product) {        this.#request = JSON.stringify({            "action": "filter",            "params": {"product": product}        });        return this.#result();    }    #getPrice(price) {        this.#request = JSON.stringify({            "action": "filter",            "params": {"price": Number(price)}        });        return this.#result();    }    #getBrand(brand) {        this.#request = JSON.stringify({            "action": "filter",            "params": {"brand": brand}        });        return this.#result();    }    #result() {        this.#checkMD5();        let header = { "Content-Type": "application/json", "Accept": "application/json", "X-Auth": this.#md5hash };        return { mode: "cors", method: "POST", headers: header, body: this.#request };    }    #checkMD5() {        if(!this.#md5hash) {            const apiPassword = document.getElementById("apiPass").value;            const dateOptions = { timeZone: 'UTC', month: 'numeric', day: 'numeric', year: 'numeric' };            const currentDate = new Date();            const timeStamp = currentDate.toLocaleDateString('en-CA', dateOptions).split("-").join("");            this.#md5hash = CryptoJS.MD5(`${apiPassword}_${timeStamp}`).toString();            sessionStorage.setItem("X-Auth", this.#md5hash);        }    }}function addData() {    let tableHead = document.querySelector("#headSection");    let tableData = document.querySelector("#dataSection");    let showItems = Number(document.querySelector("#countItems").value);    document.querySelector("#foundItems").innerText = `of ${finalData.length}`;    if(!finalData.length) {return}    if(finalData.length < showItems) {showItems = finalData.length}    checkMax(showItems);    tableHead.innerHTML = `            <tr>                <th class="columnNumber" scope="col">#</th>                <th class="columnID" scope="col">Product ID</th>                <th class="columnName" scope="col">Name</th>                <th class="columnPrice" scope="col">Price</th>                <th class="columnBrand" scope="col">Brand</th>            </tr>`;    tableData.innerHTML = "";    for(let item = 0; item < showItems; item++) {        let set = tableOffset + item;        tableData.innerHTML += `            <tr>                <td>${set + 1}</td>                <td>${finalData[set]["id"]}</td>                <td>${finalData[set]["product"]}</td>                <td>${finalData[set]["price"]}</td>                <td>${finalData[set]["brand"]}</td>            </tr>`;    }}function checkMax(showItems) {    document.getElementById("prevButton").style.visibility = "hidden";    document.getElementById("nextButton").style.visibility = "hidden";    let maxItems = finalData.length;    if(!showItems) {        itemsOffset = 0;        tableOffset = 0;        finalData = [];        return;    }    if(maxItems <= tableOffset + showItems) {        tableOffset = maxItems - showItems;        if(tableOffset <= 0) { tableOffset = 0;}    } else {        document.getElementById("nextButton").style.visibility = "visible";        waitingLoad(false);    }    if(tableOffset !== 0) {        if(tableOffset < 0) { tableOffset = 0;}        document.getElementById("prevButton").style.visibility = "visible";    }}function nextPage() {    waitingLoad(true);    let showItems = Number(document.querySelector("#countItems").value);    let maxItems = finalData.length;    tableOffset += showItems;    if(filterMode) {        waitingLoad(false);    }    if(maxItems <= tableOffset + showItems) {        if(!filterMode) {            itemsOffset += 100;            getData(false, null, null, null, null, itemsOffset).then();            tableOffset = maxItems - showItems        }    }    addData();}function prevPage() {    tableOffset -= Number(document.querySelector("#countItems").value);    if(tableOffset <= 0) {        tableOffset = 0;        document.getElementById("prevButton").style.visibility = "hidden";    }    addData();}function logOut() {    cleanMemory();}function cleanMemory() {    tableOffset = 0;    finalData.splice(0,finalData.length);    document.querySelector("#dataSection").innerHTML = `<tr><td>Waiting for new data...</td></tr>`;    document.querySelector("#headSection").innerHTML = `<tr><th class="columnNumber" scope="col"></th></tr>`;    sessionStorage.removeItem("X-Auth");    showComponents(false)    document.getElementById("nextButton").style.visibility = "hidden";    document.getElementById("prevButton").style.visibility = "hidden";    console.log("Bye bye! You are logged out!");}