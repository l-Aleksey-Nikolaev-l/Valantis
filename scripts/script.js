const URL = "https://api.valantis.store:41000/";let finalData = [];let offset = 0;async function checkSession() {    if(!sessionStorage.getItem("X-Auth")) {        console.log("Welcome! Please, enter API password!");        return;    }    waitingLogin(true);    let check = await fetch(URL, generateLoginOptions(sessionStorage.getItem("X-Auth")));    if (check.status >= 200 && check.status <= 202) {        showComponents(true);        await getIDs();        console.log("You logged!");    } else if(check.status >= 400 && check.status <= 499) {        showComponents(false)        sessionStorage.removeItem("X-Auth");        console.log("Wrong API password!");    } else if(check.status === 501 && check.status <= 599) {        showComponents(false)        sessionStorage.removeItem("X-Auth");        alert("Server's problem! Please, try again later!");        console.log("Server's problem! Please, try again later!");    } else {        location.reload();    }    waitingLogin(false);}async function logIn() {    waitingLogin(true)    let apiPassword = document.getElementById("apiPass").value;    let md5hash = generateMD5HASH(apiPassword);    let loginOptions = generateLoginOptions(md5hash);    let response = await fetch(URL, loginOptions);    if (response.status >= 200 && response.status <= 202) {        showComponents(true);        sessionStorage.setItem("X-Auth", md5hash);        console.log(`API password is correct!`)        await getIDs();    } else if(response.status >= 400 && response.status <= 499) {        alert(`Access denied! Try again!\n\nError code: ${response.status}`);    } else if(response.status === 501 && response.status <= 599) {        showComponents(false)        alert("Server's problem! Please, try again later!");        console.log("Server's problem! Please, try again later!");    } else {        await logIn();    }    waitingLogin(false)}function waitingLogin(state) {    if(state) {        document.querySelector("#loginPanel").classList.add("loginPanelWait");    } else {        if (document.querySelector("#loginPanel")) {            document.querySelector("#loginPanel").classList.remove("loginPanelWait");        }    }}function showComponents(state) {    if(!state) {        document.getElementById("dataPanel").style.display = "none";        document.getElementById("logOutButton").style.display = "none";        document.body.innerHTML += `        <section id="loginComponent" class="loginPanel">            <section id="loginPanel">                <label id="passwordLabel" for="apiPass">API Password</label>                <input id="apiPass" type="text">                <button id="logInButton" type="submit" onclick="logIn()">LogIn</button>            </section>        </section> `;    }    else {        document.getElementById("loginComponent").remove()        document.getElementById("logOutButton").style.display = "initial";        document.getElementById("dataPanel").style.display = "initial";    }}function generateLoginOptions(MD5) {    let header = { "Content-Type": "application/json", "Accept": "application/json", "X-Auth": MD5 };    let request = JSON.stringify({        "action": "get_ids",        "params": {"offset": 0, "limit": 0}    });    return { mode: "cors", method: "POST", headers: header, body: request };}function generateTimeStamp() {    const currentDate = new Date();    let dateUTC = Date.UTC(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());    const dateFormat = new Intl.DateTimeFormat("en-CA");    return dateFormat.format(dateUTC).split("-").join("");}function generateMD5HASH(apiPass) {    let md5hash = CryptoJS.MD5(`${apiPass}_${generateTimeStamp()}`);    return md5hash.toString();}async function getIDs() {    let newIDs = await fetch(URL, generateDataOptions())        .then(response => {            return response.json();        });    let crunchedIDs = newIDs.result;    await getData(crunchedIDs);}async function getData(ids, product, price, brand, offset, limit) {    let newData = await fetch(URL, generateDataOptions(ids, product, price, brand, offset, limit))        .then(response => {            return response.json();        });    finalizeData(newData)}function finalizeData(rawData) {    let tempIDs = rawData.result.map(({ id }) => id);    let tempData = rawData.result.filter(({ id }, index) => !tempIDs.includes(id, index + 1));    tempData.map((item) => {        if(item["id"] === null) {            Object.assign(item, {id: ""})        }        if(item["product"] === null) {            Object.assign(item, {product: ""})        }        if(item["price"] === null) {            Object.assign(item, {price: ""})        }        if(item["brand"] === null) {            Object.assign(item, {brand: ""})        }    });    finalData = tempData;    addData();}function generateDataOptions(ids, product, price, brand, offset, limit) {    let MD5 = sessionStorage.getItem("X-Auth");    let header = { "Content-Type": "application/json", "X-Auth": MD5 };    let request;    if(!ids || !product || !price || !brand) {        request = JSON.stringify({            "action": "get_ids",            "params": {"offset": 0, "limit": 100}        });    }    if(ids) {        request = JSON.stringify({            "action": "get_items",            "params": {"ids": ids}        });    }    return { method: "POST", headers: header, body: request };}function addData() {    let tableHead = document.querySelector("#headSection");    let tableData = document.querySelector("#dataSection");    let count = Number(document.querySelector("#countItems").value);    if(!finalData.length) {return}    checkMinMax(count);    tableHead.innerHTML = `            <tr>                <th class="columnNumber" scope="col">#</th>                <th class="columnID" scope="col">Product ID</th>                <th class="columnName" scope="col">Name</th>                <th class="columnPrice" scope="col">Price</th>                <th class="columnBrand" scope="col">Brand</th>            </tr>`;    tableData.innerHTML = "";    for(let item = 0; item < count; item++) {        let set = offset + item;        tableData.innerHTML += `            <tr>                <td>${set + 1}</td>                <td>${finalData[set]["id"]}</td>                <td>${finalData[set]["product"]}</td>                <td>${finalData[set]["price"]}</td>                <td>${finalData[set]["brand"]}</td>            </tr>`    }}function checkMinMax(count) {    let max = finalData.length;    if(max - count <= offset) {        offset = max - count        document.getElementById("nextButton").style.visibility = "hidden";        return;    } else if(offset <= 0) {        offset = 0;        document.getElementById("prevButton").style.visibility = "hidden";    }    document.getElementById("nextButton").style.visibility = "visible";}function nextPage(){    document.getElementById("prevButton").style.visibility = "visible";    offset += Number(document.querySelector("#countItems").value);    addData();}function prevPage() {    document.getElementById("nextButton").style.visibility = "visible";    offset -= Number(document.querySelector("#countItems").value);    addData();}function logOut() {    cleanMemory();}function cleanMemory() {    offset = 0;    finalData.splice(0,finalData.length);    document.querySelector("#dataSection").innerHTML = `<tr><td>Waiting for server's data...</td></tr>`;    document.querySelector("#headSection").innerHTML = `<tr><th class="columnNumber" scope="col"></th></tr>`;    sessionStorage.removeItem("X-Auth");    showComponents(false)    document.getElementById("nextButton").style.visibility = "hidden";    document.getElementById("prevButton").style.visibility = "hidden";    console.log("Bye bye! You are logged out!");}