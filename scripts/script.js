const URL = "https://api.valantis.store:41000/";let finalData = [];let tableOffset = 0;let itemsOffset = 0;let errorCount = 5; // Allowed server errors times = 5 (can be from 0 to infinity).let errorCache = 0;let filterMode = false;const timeOut = 1000;async function checkSession() {    if(!sessionStorage.getItem("X-Auth")) {        console.log("Welcome! Please, enter API password!");        return;    }    waitingLogin(true);    let checkResponse = await fetch(URL, generateDataOptions({state: true}))    if (checkResponse.status >= 200 && checkResponse.status <= 202) {        console.log("You logged!");        showComponents(true);        await getIDs({});    } else if(checkResponse.status >= 400 && checkResponse.status <= 499) {        sessionStorage.removeItem("X-Auth");        checkResponse.text().then(checkText => {            console.log(`Error code: ${checkResponse.status}\nError message: ${checkText}`);            alert(`Something went wrong!\nLogOut!`);        });    } else {        setTimeout(() => {            checkResponse.text().then(checkText => {                errorsHandler(checkSession(), checkResponse.status, checkText);                throw "Retrying request, please wait...";            });            }, timeOut);    }    waitingLogin(false);}async function logIn() {    waitingLogin(true)    let loginResponse = await fetch(URL, generateDataOptions({state: true}))    if (loginResponse.status >= 200 && loginResponse.status <= 202) {        console.log("API password is correct!");        showComponents(true);        await getIDs({});    } else if(loginResponse.status >= 400 && loginResponse.status <= 499) {        sessionStorage.removeItem("X-Auth");        loginResponse.text().then(responseText => {            console.log(`Error code: ${loginResponse.status}\nError message: ${responseText}`);            alert(`Access denied!\nYou have to try again.`);        });    } else {        setTimeout(() => {            loginResponse.text().then(responseText => {                errorsHandler(logIn(), loginResponse.status, responseText);                throw "Retrying request, please wait...";            });            }, timeOut);    }    waitingLogin(false)}function waitingLogin(state) {    if(state) {        document.querySelector("#loginPanel").classList.add("loginPanelWait");    } else {        if (document.querySelector("#loginPanel")) {            document.querySelector("#loginPanel").classList.remove("loginPanelWait");        }    }}function waitingLoad(state) {    if(state) {        document.querySelector("#paginatorLoading").classList.add("paginatorLoading");    } else {        document.querySelector("#paginatorLoading").classList.remove("paginatorLoading");    }}function showComponents(state) {    if(!state) {        document.getElementById("dataPanel").style.display = "none";        document.getElementById("logOutButton").style.display = "none";            document.body.innerHTML += `        <section id="loginComponent" class="loginPanel">            <section id="loginPanel">                <label id="passwordLabel" for="apiPass">API Password</label>                <input id="apiPass" type="text">                <button id="logInButton" type="submit" onclick="logIn()">LogIn</button>            </section>        </section> `;    }    else {        document.getElementById("loginComponent").remove()        document.getElementById("logOutButton").style.display = "initial";        document.getElementById("dataPanel").style.display = "initial";    }}function generateTimeStamp() {    const dateOptions = { timeZone: 'UTC', month: 'numeric', day: 'numeric', year: 'numeric' };    const currentDate = new Date();    return currentDate.toLocaleDateString('en-CA', dateOptions).split("-").join("");}function generateMD5HASH(apiPass) {    let md5hash = CryptoJS.MD5(`${apiPass}_${generateTimeStamp()}`);    return md5hash.toString();}function coarseFilter() {    let product = document.querySelector("#filterName").value;    let price = document.querySelector("#filterPrice").value;    let brand = document.querySelector("#filterBrand").value;    let tableHead = document.querySelector("#headSection");    let tableData = document.querySelector("#dataSection");    document.querySelector("#foundItems").innerText = "of Loading...";    filterMode = true;    checkMax(false);    tableHead.innerHTML = `            <tr>                <th class="columnNumber" scope="col"></th>            </tr>`;    tableData.innerHTML = "";    tableData.innerHTML += `            <tr>                <td>Waiting for new filtered data...</td>            </tr>`;    getIDs({ product: product, price: price, brand: brand }).then();}function fineFilter() {    let filterPrice = Number(document.querySelector("#filterPrice").value);    let filterBrand = document.querySelector("#filterBrand").value;    let tempData;    if (filterPrice && filterBrand) {        tempData = finalData.filter(item => item["price"] === filterPrice && item["brand"] === filterBrand);        finalData = tempData;    } else if(filterPrice) {        tempData = finalData.filter(item => item["price"] === filterPrice);        finalData = tempData;    } else if(filterBrand) {        tempData = finalData.filter(item => item["brand"] === filterBrand);        finalData = tempData;    }    addData();}async function getIDs({ids, product, price, brand, offset, limit}) {    let noIDs = false;    let optionsIDs = generateDataOptions({ids: ids, product: product, price: price, brand: brand, offset: offset, limit: limit});    let idsResponse = await fetch(URL, optionsIDs);    if (idsResponse.ok) {        let crunchedIDs = await idsResponse.clone().json();        if(crunchedIDs.result.length === 0) {            noIDs = true;        } else {            await getData(crunchedIDs.result);        }    } else {        noIDs = true;    }    if(noIDs) {        setTimeout(() => {            idsResponse.text().then(responseText => {                errorsHandler(getIDs({ids: ids, product: product, price: price, brand: brand, offset: offset, limit: limit}), idsResponse.status, responseText);            });        }, timeOut);    }}async function getData(ids) {    let noData = false;    let optionsData = generateDataOptions({ids: ids})    let dataResponse = await fetch(URL, optionsData);    if (dataResponse.ok) {        let crunchedData = await dataResponse.clone().json()        if(crunchedData.result.length === 0) {            noData = true;        } else {            finalizeData(crunchedData.result);        }    } else {        noData = true;    }    if(noData) {        setTimeout(() => {            dataResponse.text().then(responseText => {                errorsHandler(getData({ids: ids}), dataResponse.status, responseText);            });        }, timeOut);    }}function errorsHandler(handler, codeStatus, textStatus) {    if(errorCache < errorCount) {        errorCache++;        console.error(`Error code: ${codeStatus}\nError message: ${textStatus}\nRetrying request, please wait...`);        handler.then();    } else {        console.error(`Server has problem!\nError: ${codeStatus}\nPlease, try again later!`);        errorCache = 0;        alert("Server has problem!\nThis page will be reloaded!");        location.reload();    }}function finalizeData(rawData) {    let tempIDs = rawData.map(({ id }) => id);    let tempData = rawData.filter(({ id }, index) => !tempIDs.includes(id, index + 1));    tempData.map((item) => {        if(item["id"] === null) {            Object.assign(item, {id: ""})        }        if(item["product"] === null) {            Object.assign(item, {product: ""})        }        if(item["price"] === null) {            Object.assign(item, {price: ""})        }        if(item["brand"] === null) {            Object.assign(item, {brand: ""})        }    });    finalData.push(...tempData);    fineFilter()}function generateDataOptions({state = false, ids = null, product = null, price = null, brand = null, offset = 0, limit = 100}) {    let MD5 = sessionStorage.getItem("X-Auth");    let request;    if(!MD5) {        let apiPassword = document.getElementById("apiPass").value;        MD5 = generateMD5HASH(apiPassword);        sessionStorage.setItem("X-Auth", MD5);    }    if(state) {        request = JSON.stringify({            "action": "get_ids",            "params": {"offset": 0, "limit": 0}        });    } else if(!ids && !product && !price && !brand) {        filterMode = false;        request = JSON.stringify({            "action": "get_ids",            "params": {"offset": offset, "limit": limit}        });    } else if(ids) {        request = JSON.stringify({            "action": "get_items",            "params": {"ids": ids}        });    } else if(product) {        request = JSON.stringify({            "action": "filter",            "params": {"product": product}        });    } else if(price) {        request = JSON.stringify({            "action": "filter",            "params": {"price": Number(price)}        });    } else if(brand) {        request = JSON.stringify({            "action": "filter",            "params": {"brand": brand}        });    }    let header = { "Content-Type": "application/json", "Accept": "application/json", "X-Auth": MD5 };    return { mode: "cors", method: "POST", headers: header, body: request };}function addData() {    let tableHead = document.querySelector("#headSection");    let tableData = document.querySelector("#dataSection");    let showItems = Number(document.querySelector("#countItems").value);    document.querySelector("#foundItems").innerText = `of ${finalData.length}`;    if(!finalData.length) {return}    if(finalData.length < showItems) {showItems = finalData.length}    checkMax(showItems);    tableHead.innerHTML = `            <tr>                <th class="columnNumber" scope="col">#</th>                <th class="columnID" scope="col">Product ID</th>                <th class="columnName" scope="col">Name</th>                <th class="columnPrice" scope="col">Price</th>                <th class="columnBrand" scope="col">Brand</th>            </tr>`;    tableData.innerHTML = "";    for(let item = 0; item < showItems; item++) {        let set = tableOffset + item;        tableData.innerHTML += `            <tr>                <td>${set + 1}</td>                <td>${finalData[set]["id"]}</td>                <td>${finalData[set]["product"]}</td>                <td>${finalData[set]["price"]}</td>                <td>${finalData[set]["brand"]}</td>            </tr>`;    }}function checkMax(showItems) {    document.getElementById("prevButton").style.visibility = "hidden";    document.getElementById("nextButton").style.visibility = "hidden";    let maxItems = finalData.length;    if(!showItems) {        itemsOffset = 0;        tableOffset = 0;        finalData = [];        return;    }    if(maxItems <= tableOffset + showItems) {        tableOffset = maxItems - showItems;        if(tableOffset <= 0) { tableOffset = 0;}    } else {        document.getElementById("nextButton").style.visibility = "visible";        waitingLoad(false);    }    if(tableOffset !== 0) {        if(tableOffset < 0) { tableOffset = 0;}        document.getElementById("prevButton").style.visibility = "visible";    }}function nextPage() {    waitingLoad(true);    let showItems = Number(document.querySelector("#countItems").value);    let maxItems = finalData.length;    tableOffset += showItems;    if(filterMode) {        waitingLoad(false);    }    if(maxItems <= tableOffset + showItems) {        if(!filterMode) {            itemsOffset += 100;            getIDs({offset: itemsOffset}).then();            tableOffset = maxItems - showItems        }    }    addData();}function prevPage() {    tableOffset -= Number(document.querySelector("#countItems").value);    if(tableOffset <= 0) {        tableOffset = 0;        document.getElementById("prevButton").style.visibility = "hidden";    }    addData();}function logOut() {    cleanMemory();}function cleanMemory() {    tableOffset = 0;    finalData.splice(0,finalData.length);    document.querySelector("#dataSection").innerHTML = `<tr><td>Waiting for new data...</td></tr>`;    document.querySelector("#headSection").innerHTML = `<tr><th class="columnNumber" scope="col"></th></tr>`;    sessionStorage.removeItem("X-Auth");    showComponents(false)    document.getElementById("nextButton").style.visibility = "hidden";    document.getElementById("prevButton").style.visibility = "hidden";    console.log("Bye bye! You are logged out!");}// var data = [{ h_id: "3", city: "Dallas", state: "TX", zip: "75201", price: "162500" }, { h_id: "4", city: "Beverly Hills", state: "CA", zip: "90210", price: "319250" }, { h_id: "6", city: "Dallas", state: "TX", zip: "75000", price: "556699" }, { h_id: "5", city: "New York", state: "NY", zip: "00010", price: "962500" }];// data.sort(function (a, b) {//     return a.city.localeCompare(b.city) || b.price - a.price;// });// console.log(data);